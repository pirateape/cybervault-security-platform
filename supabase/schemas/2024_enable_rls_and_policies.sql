-- RLS and policy SQL\n\n-- Phase 1: org_members table and helper function\ncreate table if not exists public.org_members (\n  org_id uuid not null references public.organizations(id) on delete cascade,\n  user_id uuid not null references public.users(id) on delete cascade,\n  role text not null check (role in ('owner', 'admin', 'member')),\n  primary key (org_id, user_id)\n);\n\ncreate schema if not exists private;\ncreate or replace function private.get_user_org_role(org_id uuid, user_id uuid)\nreturns text\nset search_path = ''\nas 2534794\n  select role from public.org_members\n  where org_id =  and user_id = ;\n2534794 language sql security definer;\n\n-- Phase 2: Enable RLS and create policies\nalter table public.organizations enable row level security;\nalter table public.users enable row level security;\nalter table public.org_members enable row level security;\nalter table public.scans enable row level security;\nalter table public.results enable row level security;\nalter table public.rules enable row level security;\nalter table public.audit_logs enable row level security;\n\n-- organizations: allow select for org members, all for owner/admin\ncreate policy "Org members can view org" on public.organizations for select using (\n  exists (select 1 from public.org_members where org_id = id and user_id = (select auth.uid()))\n);\ncreate policy "Org admins can manage org" on public.organizations for all using (\n  private.get_user_org_role(id, (select auth.uid())) in ('owner', 'admin')\n);\n\n-- users: allow self, allow org admins\ncreate policy "User can access own row" on public.users for all using ((select auth.uid()) = id);\ncreate policy "Org admins can view users" on public.users for select using (\n  exists (select 1 from public.org_members where org_id = org_id and user_id = (select auth.uid()) and role in ('owner', 'admin'))\n);\n\n-- org_members: allow select for org members, manage for admins\ncreate policy "Org members can view membership" on public.org_members for select using (\n  exists (select 1 from public.org_members where org_id = org_id and user_id = (select auth.uid()))\n);\ncreate policy "Org admins can manage membership" on public.org_members for all using (\n  private.get_user_org_role(org_id, (select auth.uid())) in ('owner', 'admin')\n);\n\n-- scans, results, rules: allow access for org members\ncreate policy "Org members can access scans" on public.scans for all using (\n  exists (select 1 from public.org_members where org_id = org_id and user_id = (select auth.uid()))\n);\ncreate policy "Org members can access results" on public.results for all using (\n  exists (select 1 from public.org_members where org_id = org_id and user_id = (select auth.uid()))\n);\ncreate policy "Org members can access rules" on public.rules for all using (\n  exists (select 1 from public.org_members where org_id = org_id and user_id = (select auth.uid()))\n);\n\n-- audit_logs: restrict select to admins/owners\ncreate policy "Org admins can view audit logs" on public.audit_logs for select using (\n  private.get_user_org_role(org_id, (select auth.uid())) in ('owner', 'admin')\n);\ncreate policy "Org members can insert audit logs" on public.audit_logs for insert with check (\n  exists (select 1 from public.org_members where org_id = org_id and user_id = (select auth.uid()))\n);\n
